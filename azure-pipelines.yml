trigger:
  branches:
    include:
      - main
  paths:
    include:
      - backend/**
      - frontend/**
      - shared/**

pool:
  name: Default

variables:
  - group: GitHubCredentials
  - group: RenderAPICredentials

jobs:
- job: Deploy
  workspace:
    clean: all
  
  steps:
    # Diagnostiek
    - task: PowerShell@2
      displayName: "🔍 System Diagnostics"
      inputs:
        targetType: inline
        script: |
          Write-Host "════════════════════════════════════════════════"
          Write-Host "            SYSTEM DIAGNOSTICS"
          Write-Host "════════════════════════════════════════════════"
          
          $os = Get-CimInstance Win32_OperatingSystem
          $totalRAM = [math]::Round($os.TotalVisibleMemorySize / 1024 / 1024, 2)
          $freeRAM = [math]::Round($os.FreePhysicalMemory / 1024 / 1024, 2)
          $usedRAM = $totalRAM - $freeRAM
          $percentUsed = [math]::Round(($usedRAM / $totalRAM) * 100, 2)
          
          Write-Host "`n📊 MEMORY STATUS:"
          Write-Host "Total RAM: $totalRAM GB"
          Write-Host "Used RAM: $usedRAM GB ($percentUsed%)"
          Write-Host "Free RAM: $freeRAM GB"
          
          if ($percentUsed -gt 85) {
              Write-Host "`n⚠️ Warning: High memory usage detected!"
          }

    # NIEUW: Smart Version Bump
    - task: PowerShell@2
      displayName: "🔢 Smart Version Update"
      inputs:
        targetType: inline
        script: |
          Write-Host "════════════════════════════════════════════════"
          Write-Host "           SMART VERSION UPDATE"
          Write-Host "════════════════════════════════════════════════"
          
          # Get commit info
          $commitMessage = git log -1 --pretty=%B
          $sourceBranch = ""
          
          Write-Host "[DEBUG] Commit message: $commitMessage"
          
          # Check of dit een PR merge is (met of zonder # voor PR nummer)
          $isPRMerge = $commitMessage -match "Merged PR #?\d+"
          if ($isPRMerge) {
              Write-Host "[INFO] Detected PR merge"
              # Probeer branch naam uit PR merge commit te halen
              try {
                  $prInfo = git log -1 --pretty=%b
                  if ($prInfo -match 'from ([^\s]+)') {
                      $sourceBranch = [string]$matches[1]
                      Write-Host "[INFO] Source branch: $sourceBranch"
                  }
              }
              catch {
                  Write-Host "[WARNING] Could not extract source branch"
              }
          }
          
          # Detecteer type uit commit message of branch
          $commitType = ""
          
          # Voor PR merges, check in het deel na "Merged PR:"
          $messageToCheck = $commitMessage
          if ($isPRMerge) {
              # Extract het deel na "Merged PR #: " of "Merged PR 15: "
              # Azure DevOps heeft soms issues met $matches scope, dus we doen het stap voor stap
              try {
                  if ($commitMessage -match 'Merged PR #?\d+:\s*(.+)$') {
                      # Sla de match direct op om scope issues te voorkomen
                      $prTitle = $matches[1]
                      if ($prTitle) {
                          $messageToCheck = $prTitle.Trim()
                          Write-Host "[DEBUG] PR title: $messageToCheck"
                      }
                  }
                  else {
                      Write-Host "[WARNING] Could not extract PR title from: $commitMessage"
                  }
              }
              catch {
                  Write-Host "[ERROR] Failed to parse PR title: $_"
                  Write-Host "[INFO] Using full commit message instead"
              }
          }
          
          # Check voor conventional commit format
          if ($messageToCheck -match '^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?!?:') {
              $commitType = [string]$matches[1]
              Write-Host "[TYPE] Conventional commit type: $commitType"
          }
          elseif ($messageToCheck -match '^[^\s]+ (feat|fix|chore):') {
              # Check voor emoji-based format (uit auto-pr.ps1)
              # Match emoji gevolgd door type: bv "✨ feat:" of "🔧 fix:"
              $commitType = [string]$matches[1]
              Write-Host "[TYPE] Emoji commit type: $commitType"
          }
          elseif ($messageToCheck -match '\b(feat|fix|chore)\b') {
              # Fallback: zoek overal in de message naar type keywords
              $commitType = [string]$matches[1]
              Write-Host "[TYPE] Fallback type detection: $commitType"
          }
          else {
              Write-Host "[WARNING] No commit type detected in: $messageToCheck"
              Write-Host "[INFO] Will use branch-based detection or default to patch"
          }
          
          # Run smart version bump script
          $scriptPath = Join-Path $env:BUILD_SOURCESDIRECTORY "scripts\smart-version-bump.ps1"
          
          if (-not (Test-Path $scriptPath)) {
              Write-Host "[ERROR] Version bump script not found at: $scriptPath"
              Write-Host "[INFO] Current directory: $(Get-Location)"
              Write-Host "[INFO] Directory contents:"
              Get-ChildItem -Path $env:BUILD_SOURCESDIRECTORY -Recurse | Where-Object { $_.Name -like "*version*.ps1" } | ForEach-Object { Write-Host "  - $($_.FullName)" }
              exit 1
          }
          
          Write-Host "`n[RUNNING] smart version bump..."
          Write-Host "[INFO] Script path: $scriptPath"
          $result = & $scriptPath -BranchName $sourceBranch -CommitMessage $commitMessage -DryRun
          
          if ($LASTEXITCODE -eq 0) {
              Write-Host "`n[OK] Version analysis complete"
              
              # Now run the actual bump
              Write-Host "`n[APPLYING] version bump..."
              & $scriptPath -BranchName $sourceBranch -CommitMessage $commitMessage
              
              if ($LASTEXITCODE -eq 0) {
                  # Commit version changes
                  git config user.email "azure-pipeline@bluemonkeys.nl"
                  git config user.name "Azure Pipeline"
                  git add version.json frontend/package.json backend/package.json
                  git commit -m "chore: bump version [skip ci]"
                  
                  Write-Host "[SUCCESS] Version updated successfully!"
              }
          }
          else {
              Write-Host "[WARNING] Version bump skipped or failed"
          }
    
    # Rest van de pipeline blijft hetzelfde...
    - task: PowerShell@2
      displayName: "📤 Mirror Monorepo to GitHub"
      inputs:
        targetType: inline
        script: |
          Write-Host "╔══════════════════════════════════════╗"
          Write-Host "║     Starting GitHub Mirror Process   ║"
          Write-Host "╚══════════════════════════════════════╝"
          
          try {
              if (Test-Path "temp-repo") {
                  Write-Host "⚠️ Removing existing temp-repo..."
                  Remove-Item -Recurse -Force temp-repo
              }
              
              Write-Host "`n📥 Cloning repository..."
              git clone --depth 1 --single-branch --branch main https://$(System.AccessToken)@dev.azure.com/bluemonkeys123/AI-training/_git/AI-training-application temp-repo
              
              if (-not $?) {
                  throw "Clone failed!"
              }
              
              cd temp-repo
              
              git config user.email "azure-pipeline@bluemonkeys.nl"
              git config user.name "Azure Pipeline"
              
              Write-Host "`n🔄 Fetching full history for GitHub compatibility..."
              git fetch --unshallow origin
              
              Write-Host "`n📁 Repository Structure:"
              Get-ChildItem | Format-Table Name, Mode, LastWriteTime
              
              Write-Host "`n🔧 Backend Status:"
              if (Test-Path "backend/package.json") {
                  $backendPkg = Get-Content backend/package.json | ConvertFrom-Json
                  Write-Host "✅ Backend found: $($backendPkg.name) v$($backendPkg.version)"
              }
              
              Write-Host "`n🎨 Frontend Status:"
              if (Test-Path "frontend/package.json") {
                  $frontendPkg = Get-Content frontend/package.json | ConvertFrom-Json
                  Write-Host "✅ Frontend found: $($frontendPkg.name) v$($frontendPkg.version)"
              }
              
              Write-Host "`n🔗 Adding GitHub remote..."
              git remote add github https://$(GITHUB_TOKEN)@github.com/BlueMonkey003/ai-training.git
              
              Write-Host "`n📤 Pushing to GitHub..."
              git push github HEAD:main --force
              
              if ($?) {
                  Write-Host "✅ Successfully mirrored to GitHub!"
              } else {
                  throw "Push to GitHub failed!"
              }
              
          } catch {
              Write-Host "❌ Error occurred: $_"
              exit 1
          } finally {
              Write-Host "`n🧹 Performing cleanup..."
              cd $(Agent.WorkFolder)
              
              if (Test-Path "temp-repo") {
                  Remove-Item -Recurse -Force temp-repo -ErrorAction SilentlyContinue
              }
              
              [System.GC]::Collect()
          }
          
          Write-Host "`n✨ Mirror process completed!"
    
    # Rest van de deployment steps blijven hetzelfde...
    - task: PowerShell@2
      displayName: "⏱️ Wait for GitHub"
      inputs:
        targetType: inline
        script: |
          Write-Host "⏳ Waiting 5 seconds for GitHub to process push..."
          Start-Sleep -Seconds 5
          Write-Host "✅ Continue with deployments..."
    
    - task: PowerShell@2
      displayName: "🚀 Trigger Both Deployments Simultaneously"
      inputs:
        targetType: inline
        script: |
          Write-Host "╔════════════════════════════════════════════╗"
          Write-Host "║   Triggering Parallel Deployments          ║"
          Write-Host "╚════════════════════════════════════════════╝"
          
          $deploymentsFailed = $false
          
          Write-Host "`n🔧 Triggering Backend Deploy..."
          try {
              $backendResponse = Invoke-WebRequest -Uri "https://api.render.com/deploy/srv-d2rejiuuk2gs73883gog?key=81rOk6VLwAk" -Method POST -UseBasicParsing
              Write-Host "✅ Backend deploy triggered! Status: $($backendResponse.StatusCode)"
          } catch {
              Write-Host "❌ Backend deploy trigger failed: $_"
              $deploymentsFailed = $true
          }
          
          Write-Host "`n🎨 Triggering Frontend Deploy..."
          try {
              $frontendResponse = Invoke-WebRequest -Uri "https://api.render.com/deploy/srv-d2reover433s73fiir2g?key=egSfMvGp7xs" -Method POST -UseBasicParsing
              Write-Host "✅ Frontend deploy triggered! Status: $($frontendResponse.StatusCode)"
          } catch {
              Write-Host "❌ Frontend deploy trigger failed: $_"
              $deploymentsFailed = $true
          }
          
          if ($deploymentsFailed) {
              Write-Host "`n❌ One or more deployments failed to trigger!"
              exit 1
          }
          
          Write-Host "`n✅ Both deployments triggered successfully!"
          Write-Host "⏳ Waiting 15 seconds before starting status monitoring..."
          Start-Sleep -Seconds 15