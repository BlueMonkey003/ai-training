trigger:
  branches:
    include:
      - main
  paths:
    include:
      - backend/**
      - frontend/**
      - shared/**

pool:
  name: Default

variables:
  - group: GitHubCredentials
  - group: RenderAPICredentials  # Nieuwe group voor Render API key

jobs:
- job: Deploy
  workspace:
    clean: all
  
  steps:
    # [Vorige stappen blijven hetzelfde tot aan de deploy stappen]
    
    # VERBETERDE Deploy Backend met Status Tracking
    - task: PowerShell@2
      displayName: "🔧 Deploy & Monitor Backend"
      inputs:
        targetType: inline
        script: |
          Write-Host "════════════════════════════════════════════════"
          Write-Host "    Backend Deployment with Status Monitoring"
          Write-Host "════════════════════════════════════════════════"
          
          # Trigger deployment
          Write-Host "`n🚀 Triggering Backend Deploy..."
          try {
              $deployResponse = Invoke-WebRequest -Uri "https://api.render.com/deploy/srv-d2rejiuuk2gs73883gog?key=81rOk6VLwAk" -Method POST -UseBasicParsing
              Write-Host "✅ Deploy triggered! Status: $($deployResponse.StatusCode)"
          } catch {
              Write-Host "❌ Backend deploy trigger failed: $_"
              exit 1
          }
          
          # Wacht even voordat we status gaan checken
          Start-Sleep -Seconds 10
          
          # Monitor deployment status via Render API
          $serviceId = "srv-d2rejiuuk2gs73883gog"
          $renderApiKey = "$(RENDER_API_KEY)"  
          $maxWaitMinutes = 5
          $checkInterval = 10
          $maxAttempts = [math]::Floor($maxWaitMinutes * 60 / $checkInterval)
          $attempt = 0
          $deployComplete = $false
          
          Write-Host "`n📊 Monitoring deployment status..."
          Write-Host "Service ID: $serviceId"
          Write-Host "Max wait time: $maxWaitMinutes minutes"
          
          while ($attempt -lt $maxAttempts -and -not $deployComplete) {
              $attempt++
              Write-Host "`n🔄 Check $attempt/$maxAttempts..."
              
              try {
                  # Get latest deploy status from Render API
                  $headers = @{
                      "Authorization" = "Bearer $renderApiKey"
                      "Accept" = "application/json"
                  }
                  
                  $statusUrl = "https://api.render.com/v1/services/$serviceId/deploys?limit=1"
                  $statusResponse = Invoke-RestMethod -Uri $statusUrl -Headers $headers -Method GET
                  
                  if ($statusResponse -and $statusResponse[0]) {
                      $latestDeploy = $statusResponse[0]
                      $deployStatus = $latestDeploy.status
                      $deployId = $latestDeploy.id
                      $commitId = $latestDeploy.commit.id.Substring(0, 7)
                      
                      Write-Host "📦 Deploy ID: $deployId"
                      Write-Host "🔖 Commit: $commitId"
                      Write-Host "📊 Status: $deployStatus"
                      
                      switch ($deployStatus) {
                          "live" {
                              Write-Host "✅ Deployment is LIVE!"
                              $deployComplete = $true
                          }
                          "build_failed" {
                              Write-Host "❌ Build FAILED!"
                              exit 1
                          }
                          "canceled" {
                              Write-Host "⚠️ Deployment was CANCELED"
                              exit 1
                          }
                          "deactivated" {
                              Write-Host "⚠️ Service is DEACTIVATED"
                              exit 1
                          }
                          default {
                              Write-Host "⏳ Deployment still in progress..."
                              Start-Sleep -Seconds $checkInterval
                          }
                      }
                  }
              } catch {
                  Write-Host "⚠️ Error checking status: $_"
                  Start-Sleep -Seconds $checkInterval
              }
          }
          
          if (-not $deployComplete) {
              Write-Host "❌ Deployment did not complete within $maxWaitMinutes minutes!"
              exit 1
          }
          
          # Extra verificatie: check health endpoint
          Write-Host "`n🏥 Verifying backend health..."
          Start-Sleep -Seconds 10  # Geef service tijd om op te starten
          
          try {
              $healthResponse = Invoke-WebRequest -Uri "https://lunchmonkeys-backend.onrender.com/api/health" -Method GET -UseBasicParsing -TimeoutSec 30
              if ($healthResponse.StatusCode -eq 200) {
                  Write-Host "✅ Backend health check passed!"
              }
          } catch {
              Write-Host "⚠️ Health check failed but deployment is live"
          }
    
    # VERBETERDE Deploy Frontend met Status Tracking
    - task: PowerShell@2
      displayName: "🎨 Deploy & Monitor Frontend"
      inputs:
        targetType: inline
        script: |
          Write-Host "════════════════════════════════════════════════"
          Write-Host "    Frontend Deployment with Status Monitoring"
          Write-Host "════════════════════════════════════════════════"
          
          # Trigger deployment
          Write-Host "`n🚀 Triggering Frontend Deploy..."
          try {
              $deployResponse = Invoke-WebRequest -Uri "https://api.render.com/deploy/srv-d2reover433s73fiir2g?key=egSfMvGp7xs" -Method POST -UseBasicParsing
              Write-Host "✅ Deploy triggered! Status: $($deployResponse.StatusCode)"
          } catch {
              Write-Host "❌ Frontend deploy trigger failed: $_"
              exit 1
          }
          
          # Wacht even voordat we status gaan checken
          Start-Sleep -Seconds 10
          
          # Monitor deployment status
          $serviceId = "srv-d2reover433s73fiir2g"
          $renderApiKey = "$(RENDER_API_KEY)"
          $maxWaitMinutes = 15
          $checkInterval = 30
          $maxAttempts = [math]::Floor($maxWaitMinutes * 60 / $checkInterval)
          $attempt = 0
          $deployComplete = $false
          
          Write-Host "`n📊 Monitoring deployment status..."
          Write-Host "Service ID: $serviceId"
          Write-Host "Max wait time: $maxWaitMinutes minutes"
          
          while ($attempt -lt $maxAttempts -and -not $deployComplete) {
              $attempt++
              Write-Host "`n🔄 Check $attempt/$maxAttempts..."
              
              try {
                  $headers = @{
                      "Authorization" = "Bearer $renderApiKey"
                      "Accept" = "application/json"
                  }
                  
                  $statusUrl = "https://api.render.com/v1/services/$serviceId/deploys?limit=1"
                  $statusResponse = Invoke-RestMethod -Uri $statusUrl -Headers $headers -Method GET
                  
                  if ($statusResponse -and $statusResponse[0]) {
                      $latestDeploy = $statusResponse[0]
                      $deployStatus = $latestDeploy.status
                      $deployId = $latestDeploy.id
                      $commitId = $latestDeploy.commit.id.Substring(0, 7)
                      
                      Write-Host "📦 Deploy ID: $deployId"
                      Write-Host "🔖 Commit: $commitId"
                      Write-Host "📊 Status: $deployStatus"
                      
                      switch ($deployStatus) {
                          "live" {
                              Write-Host "✅ Deployment is LIVE!"
                              $deployComplete = $true
                          }
                          "build_failed" {
                              Write-Host "❌ Build FAILED!"
                              exit 1
                          }
                          "canceled" {
                              Write-Host "⚠️ Deployment was CANCELED"
                              exit 1
                          }
                          default {
                              Write-Host "⏳ Deployment still in progress..."
                              Start-Sleep -Seconds $checkInterval
                          }
                      }
                  }
              } catch {
                  Write-Host "⚠️ Error checking status: $_"
                  Start-Sleep -Seconds $checkInterval
              }
          }
          
          if (-not $deployComplete) {
              Write-Host "❌ Deployment did not complete within $maxWaitMinutes minutes!"
              exit 1
          }
          
          Write-Host "`n🎉 Frontend deployment successful!"
    
    # Finale summary
    - task: PowerShell@2
      displayName: "✨ Deployment Summary"
      inputs:
        targetType: inline
        script: |
          Write-Host "╔════════════════════════════════════════════╗"
          Write-Host "║   ✅ LunchMonkeys Deployment Complete!    ║"
          Write-Host "╠════════════════════════════════════════════╣"
          Write-Host "║ Both services deployed and verified!       ║"
          Write-Host "╠════════════════════════════════════════════╣"
          Write-Host "║ Render URLs:                               ║"
          Write-Host "║ Backend:  https://lunchmonkeys-backend.onrender.com"
          Write-Host "║ Frontend: https://lunchmonkeys-frontend.onrender.com"
          Write-Host "╠════════════════════════════════════════════╣"
          Write-Host "║ Custom Domains:                            ║"
          Write-Host "║ Backend:  https://api.lunchmonkeys.bluemonkeysaapp.nl"
          Write-Host "║ Frontend: https://lunchmonkeys.bluemonkeysaapp.nl"
          Write-Host "╚════════════════════════════════════════════╝"