trigger:
  branches:
    include:
      - main
  paths:
    include:
      - backend/**
      - frontend/**
      - shared/**

pool:
  name: Default

variables:
  - group: GitHubCredentials

jobs:
- job: Deploy
  workspace:
    clean: all  # Ruimt workspace op voor elke run
  
  steps:
    # Check system resources en cleanup oude runs
    - task: PowerShell@2
      displayName: "📊 Check Resources & Cleanup"
      inputs:
        targetType: inline
        script: |
          Write-Host "📊 Checking system resources..."
          $mem = Get-CimInstance Win32_OperatingSystem
          $percentUsed = [math]::Round(($mem.TotalVisibleMemorySize - $mem.FreePhysicalMemory) / $mem.TotalVisibleMemorySize * 100, 2)
          Write-Host "Memory usage before start: $percentUsed%"
          
          # Cleanup ALLE oude temp-repo folders in work directory
          Write-Host "`n🧹 Cleaning up old temporary folders..."
          $workDir = "$(Agent.WorkFolder)"
          Get-ChildItem -Path $workDir -Filter "temp-repo*" -Directory -ErrorAction SilentlyContinue | ForEach-Object {
              Write-Host "Removing old folder: $($_.FullName)"
              Remove-Item -Path $_.FullName -Recurse -Force -ErrorAction SilentlyContinue
          }
          
          # Ook in huidige directory voor de zekerheid
          if (Test-Path "temp-repo") {
              Write-Host "Removing temp-repo in current directory"
              Remove-Item -Recurse -Force temp-repo -ErrorAction SilentlyContinue
          }
    
    # Mirror complete monorepo naar GitHub met betere error handling
    - task: PowerShell@2
      displayName: "📤 Mirror Monorepo to GitHub"
      inputs:
        targetType: inline
        script: |
          Write-Host "╔══════════════════════════════════════╗"
          Write-Host "║     Starting GitHub Mirror Process   ║"
          Write-Host "╚══════════════════════════════════════╝"
          
          try {
              # Extra cleanup check
              if (Test-Path "temp-repo") {
                  Write-Host "⚠️ Removing existing temp-repo..."
                  Remove-Item -Recurse -Force temp-repo
              }
              
              # Clone repository met shallow clone voor minder geheugengebruik
              Write-Host "`n📥 Cloning repository (shallow)..."
              git clone --depth 1 --single-branch --branch main https://$(System.AccessToken)@dev.azure.com/bluemonkeys123/AI-training/_git/AI-training-application temp-repo
              
              if (-not $?) {
                  throw "Clone failed!"
              }
              
              cd temp-repo
              
              # Configure git
              git config user.email "azure-pipeline@bluemonkeys.nl"
              git config user.name "Azure Pipeline"
              
              # Verify structure
              Write-Host "`n📁 Repository Structure:"
              Get-ChildItem | Format-Table Name, Mode, LastWriteTime
              
              # Check backend
              Write-Host "`n🔧 Backend Status:"
              if (Test-Path "backend/package.json") {
                  $backendPkg = Get-Content backend/package.json | ConvertFrom-Json
                  Write-Host "✅ Backend found: $($backendPkg.name) v$($backendPkg.version)"
              } else {
                  throw "Backend package.json not found!"
              }
              
              # Check frontend
              Write-Host "`n🎨 Frontend Status:"
              if (Test-Path "frontend/package.json") {
                  $frontendPkg = Get-Content frontend/package.json | ConvertFrom-Json
                  Write-Host "✅ Frontend found: $($frontendPkg.name) v$($frontendPkg.version)"
              } else {
                  throw "Frontend package.json not found!"
              }
              
              # Push to GitHub
              Write-Host "`n📤 Pushing to GitHub..."
              git remote add github https://$(GITHUB_TOKEN)@github.com/BlueMonkey003/ai-training.git
              git push github HEAD:main --force
              
              if ($?) {
                  Write-Host "✅ Successfully mirrored to GitHub!"
              } else {
                  throw "Push to GitHub failed!"
              }
              
          } catch {
              Write-Host "❌ Error occurred: $_"
              exit 1
          } finally {
              # ALTIJD cleanup, ook bij errors
              Write-Host "`n🧹 Performing cleanup..."
              cd $(Agent.WorkFolder)
              
              if (Test-Path "temp-repo") {
                  Remove-Item -Recurse -Force temp-repo -ErrorAction SilentlyContinue
                  Write-Host "✅ Cleaned up temp-repo"
              }
              
              # Extra memory vrijgeven
              [System.GC]::Collect()
              [System.GC]::WaitForPendingFinalizers()
              [System.GC]::Collect()
          }
          
          Write-Host "`n✨ Mirror process completed!"
    
    # Wait for GitHub to process
    - task: PowerShell@2
      displayName: "⏱️ Wait for GitHub"
      inputs:
        targetType: inline
        script: |
          Write-Host "⏳ Waiting 5 seconds for GitHub to process push..."
          Start-Sleep -Seconds 5
          Write-Host "✅ Continue with deployments..."
    
    # Deploy Backend
    - task: PowerShell@2
      displayName: "🔧 Deploy Backend to Render"
      inputs:
        targetType: inline
        script: |
          Write-Host "🚀 Triggering Backend Deploy..."
          try {
              $response = Invoke-WebRequest -Uri "https://api.render.com/deploy/srv-d2rejiuuk2gs73883gog?key=81rOk6VLwAk" -Method POST -UseBasicParsing
              Write-Host "✅ Backend deploy triggered! Status: $($response.StatusCode)"
          } catch {
              Write-Host "❌ Backend deploy failed: $_"
              exit 1
          }
    
    # Deploy Frontend
    - task: PowerShell@2
      displayName: "🎨 Deploy Frontend to Render"
      inputs:
        targetType: inline
        script: |
          Write-Host "🚀 Triggering Frontend Deploy..."
          try {
              $response = Invoke-WebRequest -Uri "https://api.render.com/deploy/srv-d2reover433s73fiir2g?key=egSfMvGp7xs" -Method POST -UseBasicParsing
              Write-Host "✅ Frontend deploy triggered! Status: $($response.StatusCode)"
          } catch {
              Write-Host "❌ Frontend deploy failed: $_"
              exit 1
          }
    
    # Final status met resource check
    - task: PowerShell@2
      displayName: "✨ Deployment Summary"
      inputs:
        targetType: inline
        script: |
          Write-Host "╔════════════════════════════════════════════╗"
          Write-Host "║   ✅ LunchMonkeys Deployment Complete!    ║"
          Write-Host "╠════════════════════════════════════════════╣"
          Write-Host "║ Backend:  https://api.lunchmonkeys.bluemonkeysaapp.nl"
          Write-Host "║ Frontend: https://lunchmonkeys.bluemonkeysaapp.nl"
          Write-Host "╚════════════════════════════════════════════╝"
          
          # Final memory check
          Write-Host "`n📊 Final resource check:"
          $mem = Get-CimInstance Win32_OperatingSystem
          $percentUsed = [math]::Round(($mem.TotalVisibleMemorySize - $mem.FreePhysicalMemory) / $mem.TotalVisibleMemorySize * 100, 2)
          Write-Host "Memory usage after completion: $percentUsed%"