trigger:
  branches:
    include:
      - main
  paths:
    include:
      - backend/**
      - frontend/**
      - shared/**

pool:
  name: Default

variables:
  - group: GitHubCredentials
  - group: RenderAPICredentials

jobs:
- job: Deploy
  workspace:
    clean: all
  
  steps:
    # Diagnostiek
    - task: PowerShell@2
      displayName: "🔍 System Diagnostics"
      inputs:
        targetType: inline
        script: |
          Write-Host "════════════════════════════════════════════════"
          Write-Host "            SYSTEM DIAGNOSTICS"
          Write-Host "════════════════════════════════════════════════"
          
          $os = Get-CimInstance Win32_OperatingSystem
          $totalRAM = [math]::Round($os.TotalVisibleMemorySize / 1024 / 1024, 2)
          $freeRAM = [math]::Round($os.FreePhysicalMemory / 1024 / 1024, 2)
          $usedRAM = $totalRAM - $freeRAM
          $percentUsed = [math]::Round(($usedRAM / $totalRAM) * 100, 2)
          
          Write-Host "`n📊 MEMORY STATUS:"
          Write-Host "Total RAM: $totalRAM GB"
          Write-Host "Used RAM: $usedRAM GB ($percentUsed%)"
          Write-Host "Free RAM: $freeRAM GB"
          
          if ($percentUsed -gt 85) {
              Write-Host "`n⚠️ Warning: High memory usage detected!"
          }

    # NIEUW: Smart Version Bump
    - task: PowerShell@2
      displayName: "🔢 Smart Version Update"
      inputs:
        targetType: inline
        script: |
          Write-Host "════════════════════════════════════════════════"
          Write-Host "           SMART VERSION UPDATE"
          Write-Host "════════════════════════════════════════════════"
          
          # Functie om change type te bepalen
          function Get-ChangeType {
              param([string]$message, [string]$branch)
              
              # Check commit message voor keywords
              if ($message -match '\b(breaking|major)\b') { return "major" }
              if ($message -match '\b(feat|feature)\b') { return "minor" }
              if ($message -match '\b(fix|bugfix|hotfix)\b') { return "patch" }
              
              # Check branch naam (voor PR's)
              if ($branch -match '^feature/') { return "minor" }
              if ($branch -match '^(bugfix|hotfix)/') { return "patch" }
              
              # Check files changed voor hints
              $changedFiles = git diff --name-only HEAD~1
              if ($changedFiles -match 'package\.json' -and $message -notmatch 'version') { return "minor" }
              
              # Default
              return "patch"
          }
          
          # Functie om versie te verhogen
          function Update-Version {
              param(
                  [string]$currentVersion,
                  [string]$changeType
              )
              
              $parts = $currentVersion.Split('.')
              $major = [int]$parts[0]
              $minor = [int]$parts[1]
              $patch = [int]$parts[2]
              
              switch ($changeType) {
                  "major" {
                      $major++
                      $minor = 0
                      $patch = 0
                  }
                  "minor" {
                      $minor++
                      $patch = 0
                  }
                  "patch" {
                      $patch++
                  }
              }
              
              return "$major.$minor.$patch"
          }
          
          # Lees huidige versie
          $versionFile = "version.json"
          if (Test-Path $versionFile) {
              $versionData = Get-Content $versionFile | ConvertFrom-Json
              $currentVersion = $versionData.version
              $buildNumber = $versionData.buildNumber
              
              Write-Host "Current version: $currentVersion (build $buildNumber)"
              
              # Bepaal change type
              $commitMessage = git log -1 --pretty=%B
              $sourceBranch = ""
              
              # Check of dit een PR merge is
              if ($commitMessage -match "Merged PR #\d+") {
                  Write-Host "Detected PR merge"
                  # Haal branch naam uit PR merge commit
                  $prInfo = git log -1 --pretty=%b
                  if ($prInfo -match 'from ([^\s]+)') {
                      $sourceBranch = $matches[1]
                      Write-Host "Source branch: $sourceBranch"
                  }
              }
              
              $changeType = Get-ChangeType -message $commitMessage -branch $sourceBranch
              Write-Host "Change type detected: $changeType"
              
              # Update version
              $newVersion = Update-Version -currentVersion $currentVersion -changeType $changeType
              $buildNumber++
              
              Write-Host "New version: $newVersion (build $buildNumber)"
              
              # Update version data
              $versionData.version = $newVersion
              $versionData.buildNumber = $buildNumber
              $versionData.lastUpdated = Get-Date -Format "yyyy-MM-dd"
              $versionData.changeType = $changeType
              $versionData.lastCommit = $commitMessage.Split("`n")[0]
              
              # Write back to file
              $versionData | ConvertTo-Json | Set-Content $versionFile
              
              # Update package.json files
              $files = @("frontend/package.json", "backend/package.json")
              foreach ($file in $files) {
                  if (Test-Path $file) {
                      $content = Get-Content $file -Raw | ConvertFrom-Json
                      $content.version = $newVersion
                      $content | ConvertTo-Json -Depth 10 | Set-Content $file
                      Write-Host "✅ Updated $file to v$newVersion"
                  }
              }
              
              # Commit version change
              git config user.email "azure-pipeline@bluemonkeys.nl"
              git config user.name "Azure Pipeline"
              git add version.json frontend/package.json backend/package.json
              git commit -m "chore: bump version to $newVersion ($changeType) [skip ci]"
              
              Write-Host "✅ Version updated successfully!"
              Write-Host "   $currentVersion → $newVersion ($changeType)"
              
              # Set output variable voor later gebruik
              Write-Host "##vso[task.setvariable variable=NEW_VERSION]$newVersion"
              Write-Host "##vso[task.setvariable variable=CHANGE_TYPE]$changeType"
          } else {
              Write-Host "⚠️ version.json not found, creating new one"
              
              $newVersionData = @{
                  version = "1.0.0"
                  buildNumber = 1
                  lastUpdated = Get-Date -Format "yyyy-MM-dd"
                  changeType = "initial"
                  lastCommit = "Initial version"
              }
              
              $newVersionData | ConvertTo-Json | Set-Content $versionFile
              Write-Host "✅ Created version.json with v1.0.0"
          }
    
    # Rest van de pipeline blijft hetzelfde...
    - task: PowerShell@2
      displayName: "📤 Mirror Monorepo to GitHub"
      inputs:
        targetType: inline
        script: |
          Write-Host "╔══════════════════════════════════════╗"
          Write-Host "║     Starting GitHub Mirror Process   ║"
          Write-Host "╚══════════════════════════════════════╝"
          
          try {
              if (Test-Path "temp-repo") {
                  Write-Host "⚠️ Removing existing temp-repo..."
                  Remove-Item -Recurse -Force temp-repo
              }
              
              Write-Host "`n📥 Cloning repository..."
              git clone --depth 1 --single-branch --branch main https://$(System.AccessToken)@dev.azure.com/bluemonkeys123/AI-training/_git/AI-training-application temp-repo
              
              if (-not $?) {
                  throw "Clone failed!"
              }
              
              cd temp-repo
              
              git config user.email "azure-pipeline@bluemonkeys.nl"
              git config user.name "Azure Pipeline"
              
              Write-Host "`n🔄 Fetching full history for GitHub compatibility..."
              git fetch --unshallow origin
              
              Write-Host "`n📁 Repository Structure:"
              Get-ChildItem | Format-Table Name, Mode, LastWriteTime
              
              Write-Host "`n🔧 Backend Status:"
              if (Test-Path "backend/package.json") {
                  $backendPkg = Get-Content backend/package.json | ConvertFrom-Json
                  Write-Host "✅ Backend found: $($backendPkg.name) v$($backendPkg.version)"
              }
              
              Write-Host "`n🎨 Frontend Status:"
              if (Test-Path "frontend/package.json") {
                  $frontendPkg = Get-Content frontend/package.json | ConvertFrom-Json
                  Write-Host "✅ Frontend found: $($frontendPkg.name) v$($frontendPkg.version)"
              }
              
              Write-Host "`n🔗 Adding GitHub remote..."
              git remote add github https://$(GITHUB_TOKEN)@github.com/BlueMonkey003/ai-training.git
              
              Write-Host "`n📤 Pushing to GitHub..."
              git push github HEAD:main --force
              
              if ($?) {
                  Write-Host "✅ Successfully mirrored to GitHub!"
              } else {
                  throw "Push to GitHub failed!"
              }
              
          } catch {
              Write-Host "❌ Error occurred: $_"
              exit 1
          } finally {
              Write-Host "`n🧹 Performing cleanup..."
              cd $(Agent.WorkFolder)
              
              if (Test-Path "temp-repo") {
                  Remove-Item -Recurse -Force temp-repo -ErrorAction SilentlyContinue
              }
              
              [System.GC]::Collect()
          }
          
          Write-Host "`n✨ Mirror process completed!"
    
    # Rest van de deployment steps blijven hetzelfde...
    - task: PowerShell@2
      displayName: "⏱️ Wait for GitHub"
      inputs:
        targetType: inline
        script: |
          Write-Host "⏳ Waiting 5 seconds for GitHub to process push..."
          Start-Sleep -Seconds 5
          Write-Host "✅ Continue with deployments..."
    
    - task: PowerShell@2
      displayName: "🚀 Trigger Both Deployments Simultaneously"
      inputs:
        targetType: inline
        script: |
          Write-Host "╔════════════════════════════════════════════╗"
          Write-Host "║   Triggering Parallel Deployments          ║"
          Write-Host "╚════════════════════════════════════════════╝"
          
          $deploymentsFailed = $false
          
          Write-Host "`n🔧 Triggering Backend Deploy..."
          try {
              $backendResponse = Invoke-WebRequest -Uri "https://api.render.com/deploy/srv-d2rejiuuk2gs73883gog?key=81rOk6VLwAk" -Method POST -UseBasicParsing
              Write-Host "✅ Backend deploy triggered! Status: $($backendResponse.StatusCode)"
          } catch {
              Write-Host "❌ Backend deploy trigger failed: $_"
              $deploymentsFailed = $true
          }
          
          Write-Host "`n🎨 Triggering Frontend Deploy..."
          try {
              $frontendResponse = Invoke-WebRequest -Uri "https://api.render.com/deploy/srv-d2reover433s73fiir2g?key=egSfMvGp7xs" -Method POST -UseBasicParsing
              Write-Host "✅ Frontend deploy triggered! Status: $($frontendResponse.StatusCode)"
          } catch {
              Write-Host "❌ Frontend deploy trigger failed: $_"
              $deploymentsFailed = $true
          }
          
          if ($deploymentsFailed) {
              Write-Host "`n❌ One or more deployments failed to trigger!"
              exit 1
          }
          
          Write-Host "`n✅ Both deployments triggered successfully!"
          Write-Host "⏳ Waiting 15 seconds before starting status monitoring..."
          Start-Sleep -Seconds 15